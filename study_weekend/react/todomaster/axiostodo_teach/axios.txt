
1. .env
    가장 우선 순위가 낮은 환경변수 설정 파일

2. .env.develpoment
    개발 환경에서만 작동되는 환경변수 설정 파일

3. .env.production
    배포 환경에서만 작동되는 환경변수 설정 파일

4. .env.test
    테스트 환경에서만 작동되는 환경변수 설정 파일

각각 파일에는 local 파일이 존재하며 (ex .env.local, .env.develpoment.local)
local 파일은 기존에 있던 파일보다 우선 순위가 높습니다

.env < .env.local < .env.develpoment/production/test < .env develpoment/production/test.local


* 주의사항
    .env는 git과 같은 원격 저장소나 버전관리 저장소에 올라가도 되는가?
        안됩니다. 환경변수는 배포 환경에서 직접 설정해줄 수 있어요


5. .env.sample
    배포 시 환경변수의 key값이 어떤 것을 의미하는지 정의한 문서
        ex) REACT_APP_BACK_URL : 계좌 관련 API 백엔드 URL
    
------------------------------------------------------------------------------

1. 인증 토큰, 재발급 토큰
    인증 토큰, 유저의 정보가 암호화 된 토큰이며 해당 토큰이 있어야 해당 사용자는 인증된 사용자
    
    보통 해당 인증 토큰이 없다면 response ststus code 401 (unauthorized)
    토큰이 있지만 허가되지 않은 사용자는 reponse ststus code 403(forbidden)

    따라서 해당 토큰이 만료되면 401, 403을 return
    프론트 엔드 개발자가 401과 403을 비동기 통신의 응답 결과로 반환 받으면 어떻게 해야할까요?

    1) refresh token o
        axios interceptor 해당 에러 발생하면 refresh token으로 access token을 재발급 받고
        실패한 요청을 다시 재요청

    2) refresh token x
        refresh token이 없다면 프론트 엔드에서는 로그아웃 로직을 실행


2. 토큰 관리 방법
    1) 웹스토리지
            브라우저를 통해 데이터를 저장
            DB에 저장되는 데이터와 달리 삭제되어도 상관 없는 소량의 데이터를 저장할 때 사용
            사용자에게 데이터 저장을 부담 -> 사용자의 하드웨어에 의존하는 소프트웨어 탄생

        로컬 스토리지
            영구적인 스토리지, 다른 탭에서도 데이터가 공유되는 특징
            웹 페이지의 세션이 끝나도 데이터가 삭제되지 않음

            ex) - 인증 토큰을 저장
                - 비회원 로직 구성, 비회원 인덱싱 키 값이 없음, 그러나 인덱싱 키가 있다면
                  DB에 저장 가능


        세션 스토리지
            웹 페이지의 세션이 끝나면 데이터가 함께 삭제
            다른 탭에서 데이터가 격리되어 저장

        사용법
            localstorage, sessionstorage
                .setITem(key, value) -> 해당 key, value 쌍으로 저장
                .getItem(key) -> 해당 key 조회
                .removeIte(key) -> 해당 key 삭제
                .clear() -> 모든 데이터 삭제

    2) 쿠키
        브라우저에 저장된 key-value로 이루어진 작은 데이터 파일
        따로 설정하지 않아도 서버와의 데이터 교환이 가능하며
        https나 secure 옵션을 통해서 https 환경에서만 교환이 가능하거나 외부에서 접근이 불가능 하도록
        설정이 가능

        브라우저가 닫히면 삭제, 유효기간을 명시하면 닫혀도 삭제되지 않습니다.

        ex)
            refresh-token
            session-id
            자동 로그인
            팝업창(모달창) 3일 동안 보지 않기


    3) state
        웹스토리지에 저장된 로그인 정보는 영구적으로 혹은 반영구적으로 유지할 수 있지만
        state가 맞을까요?

        로그인 완료 되었을 때 실행해야하는 로직이 있다면 그 로직이 있고 UI를 변경시켜야 한다면?

            1. 새로고침, 페이지이동 -> 페이지의 깜빡임
            2. 전역 상태로 가지고 있는 것

3. 백엔드에서 프론트 엔드에 토큰을 전달하는 방법

           1. res.body
           2. res.header
           3. cookies

4. 프론트엔드에서 백엔드에 토큰을 전달하는 방법

            1. req.body
            2. cookies
                - axios 인스턴스 생성 시 withCrdentials = true
                - 서버 간의 통신에서 쿠키를 서로 교환 가능 하도록 옵션

            3. res.header (o)
                - axios interceptor
                - axios 인스턴스 생성의 default

---------------------------------------------------------------------------------------

1. todo, accessToken, api call의 관심사(SOC - 의존성 주입 방법) 분리 (전역 상태 관리 자유)
2. delete, update -> axios.delete('/todo/3')
                     axios.put('/todo/3, { content, state })

---------------------------------------------------------------------------------------

1. 백엔드에게 데이터 요청을 보냈으면, 요청의 주인이 나(사용자)라는 사실을 알려줘야함
    - 게시글을 쓰거나 데이터를 저장할 때 해당 사용자의 고유번호도 저장해야하기 때문에

2. 알려줄 수 있는 방법에는 인증토큰, sesion
    - 인증 토큰은 주로 jwt(json web token)을 사용하며 서버의 부담이 없이 어떤 서버에서든 토큰을
      주고 받을 수 있다는 장점

    - sesssion은 서버에 부담이 큰다는 대신, 인증 토큰보다 보안에 더 안정된 상황에서 데이터를 주고
      받을 수 있다는 장점

3. 세션의 경우 로그인 시 백엔드에서 세션-id를 보통 쿠키를 통해 프론트 엔드에 전달
   인증 토큰의 경우 응답 데이터에 토큰과 이를 재발급할 수 있는 refresh 토큰을 전달

4. 인증 토큰은 인증이 필요한 api 요청에 항상 header에 실어서 보내야하며
   토큰을 보내는 방법에는 2가지 방법이 존재합니다.

    - axios 인스턴스를 생성할 때 기본 값으로 토큰을 설정하며
      baerer는 해당 토큰이 jwt 토큰이라는 것을 알려주는 일종의 분류이므로 앞에서 붙여 사용

    - axios의 인터셉터를 사용하여 백엔드에 요청을 보내기 전에
      데이터를 가로채 해더에 토큰을 심어서 전송

5. 인증 토큰은 짧은 만료 기한을 가지고 있으며 만료된다면 프로덕트의 로직에 따라 로그아웃을 로직을
   실행하거나, 만료 되었다는 에러와 함께 응답데이터가 전달되면 리프레쉬 토큰으로 재발급 후 재요청

    - axios의 인터셉터를 사용하여 프론트엔드가 응답을 받기 전에
      데이터를 가로체 백엔드에 jwt 재발급 요청을 보내고 다시 토큰을 실어서 재요청
    
    - 모든 것은 사용자가 데이터를 받기 전에 이루어지므로
      사용자는 리프레쉬 토큰이 있다면, 토큰이 만료된 것을 모르고 사이트를 이용










